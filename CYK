#include<iostream>
#include<cstring>
#include<string>
#include<iomanip>
using namespace std;

//input :start symbol
//no. of productions
//productions

#define m 100
string gram[m][m];
string gram1[m];

int n,p;

string concat(string a,string b)
{
	int i;
	
	
	//cout<<a<<" "<<b;
	
	
	string r=a;
	
	for(i=0;i<b.length();i++ )
	{
		if((r.find(b[i])) > r.length())
		r=r+b[i];
		
	}
	
//	cout<<"hiii"<<r;
	return r;
}


void break_grammar(string a)
{
	int i=0;
	p=0;
	while(a.length())
	{
		i=a.find("|");
		
		if(i>a.length())
		{
		
		gram1[p++]=a;
		a="";
	    }
	    
	    else
	    {
	    	gram1[p++]=a.substr(0,i);
	    	a=a.substr(i+1,a.length());
	    }
	
	}
}


int lhs(string a)
{
	if(a.length()==1 && a[0]>='A' && a[0]<='Z')
	return 1;
}


int rhs(string a)
{
	if(a.length()==1 && a[0]>='a' && a[0]<='z')
	return 1;
	
	if(a.length()==2 &&  a[0]>='A' && a[0]<='Z' &&  a[1]>='A' && a[1]<='Z')
	return 1;
	
	return 0;
}

string search(string p)
{
	int j,k;
	
	string r="";
	
	for(j=0;j<n;j++)
	{
		k=1;
		
		while(gram[j][k]!="")
		{
			if(gram[j][k]==p)
			{
				r=concat(r,gram[j][0]);
			}
			k++;
		}
	}
	
	return r;
}



string  generate_combination(string a,string b)
{
	int i,j;
	
	string pri=a,re="";
	
	for(i=0;i<a.length();i++)
	{
		for(j=0;j<b.length();j++)
		{
			pri="";
			pri=pri+a[i]+b[j];
			re=re+search(pri);
		}
	}
	return re;
}



int main()
{
	string start,str,a,r,pr;
	int i,pt,j,l,k;
	
	cout<<"Enter the start symbol"<<endl;
	cin>>start;
	
	cout<<"\n Number of prductions"<<endl;
	cin>>n;
	
	for(i=0;i<n;i++)
	{
		cin >>a;
		pt=a.find("->");
		gram[i][0]=a.substr(0,pt);
		
		if(lhs(gram[i][0])==0)
		{
			cout<<"Grammar Not in CNF\n";
			return 0;
		}
		a=a.substr(pt+2,a.length());
		break_grammar(a);
		
		for(j=0;j<p;j++)
		{
			gram[i][j+1]=gram1[j];
			if(rhs(gram1[j])==0)
	     	{
		    	cout<<"Grammar Not in CNF\n";
			    return 0;
	    	}
			
		}
	}
	
	
	string matrix[m][m],st;
	
	for(i=0;i<n;i++)
	{
		
		for(j=0;j<n;j++)
		{
		matrix[i][j]="";
			//cout<<gram1[i]<<" ";
		}
		
		cout<<endl;
		
		
		
	}
	
	
	while(1)
	{
		
	
	cout<<"Enter string to be checked :"<<endl;
	
	cin>>str;
	
/*	for(i=0;i<n;i++)
	{
		
		for(j=0;j<n;j++)
		{
			cout<<gram[i][j]<<" ";
			//cout<<gram1[i]<<" ";
		}
		
		cout<<endl;
	}*/
	
	for(i=0;i<str.length();i++)
	{
		r="";
		st="";
		
		st=st+str[i];
		
		for(j=0;j<n;j++)
		{
			k=1;
			while(gram[j][k]!="")
			{
				if(gram[j][k]==st)
				{
					r=concat(r,gram[j][0]);
				}
				k++;
			}
		}
		matrix[i][i]=r;
	}
	
	
	for(k=1;k<str.length();k++)
	{
		for(j=k;j<str.length();j++)
		{
			r="";
			
			for(l=j-k;l<j;l++)
			
			{
				pr=generate_combination(matrix[j-k][l],matrix[l+1][j]);
				r=concat(r,pr);
			}
			matrix[j-k][j]=r;
		}
	}
	
	
	for(i=0;i<str.length();i++)
	{
		k=0;
		l=str.length()-i-1;
		
		for(j=l;j<str.length();j++)
		{
			cout<<setw(5)<<matrix[k++][j]<<" ";
		}
		cout<<endl;
	}
	
	
	
	
	if((matrix[0][str.length()-1].find(start[0]))  !=std::string::npos)
	{
		cout<<"Yes, String Can be Generated!!"<<endl;
		
		cin>>str;
		if(str=="n") break; 
	}
	else
	{
	
	cout<<"NO, String Can not be Generated!!"<<endl;
			cin>>str;
		if(str=="n") break; 
    }
}
}



/*

INPUT;

S
4

S->AB|BC
A->BA|a
B->CC|b
C->AB|a
*/

